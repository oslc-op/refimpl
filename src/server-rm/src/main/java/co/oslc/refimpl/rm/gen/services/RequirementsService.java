// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Jim Amsden          - Support for UI Preview (494303)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package co.oslc.refimpl.rm.gen.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONException;
import org.apache.wink.json4j.JSONObject;
import org.apache.wink.json4j.JSONArray;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.eclipse.lyo.oslc4j.core.OSLC4JConstants;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import co.oslc.refimpl.rm.gen.RMManager;
import co.oslc.refimpl.rm.gen.RMConstants;
import org.eclipse.lyo.oslc.domains.rm.Oslc_rmDomainConstants;
import org.eclipse.lyo.oslc.domains.rm.Oslc_rmDomainConstants;
import co.oslc.refimpl.rm.gen.servlet.ServiceProviderCatalogSingleton;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.rm.Requirement;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_SHAPES_DOMAIN)
@Path("serviceProviders/{serviceProviderId}/service1/requirements")
@Api(value = "OSLC Service for {" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "}")
public class RequirementsService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    private static final Logger log = LoggerFactory.getLogger(RequirementsService.class);

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public RequirementsService()
    {
        super();
    }

    private void addCORSHeaders (final HttpServletResponse httpServletResponse) {
        //UI preview can be blocked by CORS policy.
        //add select CORS headers to every response that is embedded in an iframe.
        httpServletResponse.addHeader("Access-Control-Allow-Origin", "*");
        httpServletResponse.addHeader("Access-Control-Allow-Methods", "GET, OPTIONS, HEAD");
        httpServletResponse.addHeader("Access-Control-Allow-Headers", "origin, content-type, accept, authorization");
        httpServletResponse.addHeader("Access-Control-Allow-Credentials", "true");
    }

    @OslcQueryCapability
    (
        title = "RequirementQC",
        label = "Requirements Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_rmDomainConstants.REQUIREMENT_PATH,
        resourceTypes = {Oslc_rmDomainConstants.REQUIREMENT_TYPE},
        usages = {}
    )
    @GET
    @Path("query")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_rmDomainConstants.REQUIREMENT_TYPE + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_rmDomainConstants.REQUIREMENT_PATH + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public Requirement[] queryRequirements(
                                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryRequirements
        // Here additional logic can be implemented that complements main action taken in RMManager
        // End of user code

        final List<Requirement> resources = RMManager.queryRequirements(httpServletRequest, serviceProviderId, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new Requirement [resources.size()]);
    }

    @GET
    @Path("query")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_rmDomainConstants.REQUIREMENT_TYPE + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_rmDomainConstants.REQUIREMENT_PATH + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryRequirementsAsHtml(
                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryRequirementsAsHtml
        // End of user code

        final List<Requirement> resources = RMManager.queryRequirements(httpServletRequest, serviceProviderId, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryRequirementsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/rm/gen/requirementscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "RequirementSD",
         label = "Requirements Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/service1/requirements/selector",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_rmDomainConstants.REQUIREMENT_TYPE},
         usages = {}
    )
    @GET
    @Path("selector")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response RequirementSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code RequirementSelector_init
            // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code RequirementSelector_setAttributes
            // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<Requirement> resources = RMManager.RequirementSelector(httpServletRequest, serviceProviderId, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (Requirement resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code RequirementSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/rm/gen/requirementselector.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    /**
     * Create a single Requirement via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "RequirementCF",
         label = "Requirements Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_rmDomainConstants.REQUIREMENT_PATH},
         resourceTypes = {Oslc_rmDomainConstants.REQUIREMENT_TYPE},
         usages = {}
    )
    @POST
    @Path("create")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Creation factory for resources of type {" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "}",
        notes = "Creation factory for resources of type {" + "<a href=\"" + Oslc_rmDomainConstants.REQUIREMENT_TYPE + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_rmDomainConstants.REQUIREMENT_PATH + "\">" + Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE
    )
    public Response createRequirement(
            @PathParam("serviceProviderId") final String serviceProviderId ,
            final Requirement aResource
        ) throws IOException, ServletException
    {
        Requirement newResource = RMManager.createRequirement(httpServletRequest, aResource, serviceProviderId);
        httpServletResponse.setHeader("ETag", RMManager.getETagFromRequirement(newResource));
        return Response.created(newResource.getAbout()).entity(newResource).header(RMConstants.HDR_OSLC_VERSION, RMConstants.OSLC_VERSION_V2).build();
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("creator")
    @Consumes({MediaType.WILDCARD})
    public Response RequirementCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code RequirementCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/rm/gen/requirementcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "RequirementCD",
         label = "Requirements Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/service1/requirements/creator",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_rmDomainConstants.REQUIREMENT_TYPE},
         usages = {}
    )
    @POST
    @Path("creator")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createRequirementFromDialog(MultivaluedMap<String, String> formParams
            , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws URISyntaxException, ParseException {
        Requirement newResource = null;

        Requirement aResource = new Requirement();

        List<String> paramValues;

        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("elaboratedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addElaboratedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("elaborates");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addElaborates(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("specifiedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSpecifiedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("specifies");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSpecifies(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("trackedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTrackedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("validatedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addValidatedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("satisfiedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSatisfiedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("satisfies");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSatisfies(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("decomposedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addDecomposedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("decomposes");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addDecomposes(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("constrainedBy");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addConstrainedBy(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("constrains");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addConstrains(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = RMManager.createRequirementFromDialog(httpServletRequest, aResource, serviceProviderId);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
}
