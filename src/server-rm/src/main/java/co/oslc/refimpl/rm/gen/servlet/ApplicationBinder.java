// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package co.oslc.refimpl.rm.gen.servlet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.glassfish.hk2.api.Factory;
import org.glassfish.hk2.utilities.binding.AbstractBinder;

import jakarta.inject.Singleton;

import co.oslc.refimpl.rm.gen.RestDelegate;
import co.oslc.refimpl.rm.gen.ResourcesFactory;

import java.net.URI;
import java.util.ArrayList;
import org.eclipse.lyo.oslc4j.trs.server.InmemPagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrsFactory;
import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
// Start of user code imports
import jakarta.inject.Inject;
// End of user code

// Start of user code pre_class_code
// End of user code

public class ApplicationBinder extends AbstractBinder {

    private static final Logger log = LoggerFactory.getLogger(ApplicationBinder.class);

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public ApplicationBinder()
    {
        log.info("HK2 contract binding init");
    }

    @Override
    protected void configure() {
        log.info("HK2 contract binding start");
    
        // Start of user code ConfigureInitialise
        // End of user code
        bindAsContract(RestDelegate.class).in(Singleton.class);
        bindFactory(ResourcesFactoryFactory.class).to(ResourcesFactory.class).in(Singleton.class);
    
    
        bindFactory(InmemTrsEventHandlerFactory.class).to(TrsEventHandler.class).in(Singleton.class);
        bindFactory(InmemPagedTrsFactory.class).to(PagedTrs.class).in(Singleton.class);
    
        // Start of user code ConfigureFinalize
        // End of user code
    }
    static class ResourcesFactoryFactory implements Factory<ResourcesFactory> {
        @Override
        public ResourcesFactory provide() {
            return new ResourcesFactory(OSLC4JUtils.getServletURI());
        }
    
        @Override
        public void dispose(ResourcesFactory instance) {
        }
    }
    
    static class InmemTrsEventHandlerFactory implements Factory<TrsEventHandler> {
        // Start of user code TrsEventHandlerInitialise
        // End of user code
    
        @Override
        public TrsEventHandler provide() {
            ArrayList<URI> uris = new ArrayList<URI>();
            // Start of user code TrsEventHandlerInitialBase
            //TODO: Provide the initial list of URIs to populate the TRS log with
            // End of user code
    
            InmemPagedTrs inmemTrs = new PagedTrsFactory().getInmemPagedTrs(50, 50, uris);
            return inmemTrs;
        }
    
        @Override
        public void dispose(TrsEventHandler instance) {
            // Start of user code TrsEventHandlerDispose
            // End of user code
        }
    }
    
    static class InmemPagedTrsFactory implements Factory<PagedTrs> {
        @Inject TrsEventHandler trsEventHandler;
    
        @Override
        public PagedTrs provide() {
            // Start of user code PagedTrsInitialise
            // End of user code
            return (InmemPagedTrs) trsEventHandler;
        }
    
        @Override
        public void dispose(PagedTrs instance) {
            // Start of user code PagedTrsDispose
            // End of user code
        }
    }
}
