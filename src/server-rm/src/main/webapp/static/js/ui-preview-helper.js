// Start of user code "Copyright Header"
/*******************************************************************************
 Copyright (c) 2020 KTH Royal Institute of Technology.

  All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
and Eclipse Distribution License v. 1.0 which accompanies this distribution.

  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
  and the Eclipse Distribution License is available at
http://www.eclipse.org/org/documents/edl-v10.php.

  Contributors:

    Jad El-khoury  - Support for UI Preview

This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

//Setup a popover on each of the oslcLinkElements, where the popover content is an iframe presenting the OSLC UI-Preview.
function setupUiPreviewOnPopover(oslcLinkElements) {
  // Convert NodeList to Array if needed
  const elements = Array.from(oslcLinkElements);

  // Destroy any existing popovers first
  elements.forEach(element => {
    const existingPopover = bootstrap.Popover.getInstance(element);
    if (existingPopover) {
      existingPopover.dispose();
    }
  });

  // Add CSS to improve popover styling and ensure proper sizing
  if (!document.getElementById('ui-preview-styles')) {
    const style = document.createElement('style');
    style.id = 'ui-preview-styles';
    style.textContent = `
      .ui-preview-popover {
        pointer-events: auto;
        max-width: 90vw;
        width: 600px;
        height: auto;
        z-index: 1070;
      }
      .ui-preview-popover .popover-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        font-weight: 600;
        padding: 8px 12px;
        margin: 0;
        display: block !important;
        flex-shrink: 0;
      }
      .ui-preview-popover .popover-body {
        pointer-events: auto;
        padding: 8px;
        height: 450px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }
      .ui-preview-popover .popover-body iframe {
        border: none;
        width: 100%;
        height: 100%;
        min-height: 400px;
        display: block;
        flex: 1;
        border-radius: 4px;
      }
    `;
    document.head.appendChild(style);
  }  // Initialize popovers with improved settings for each element
  elements.forEach(element => {
    let loadingTimeout;
    let hideTimeout;
    let isPopoverShown = false;
    
    const popover = new bootstrap.Popover(element, {
      container: "body",
      content: "Loading preview...",
      title: "Resource Preview",  // Default title that will be replaced
      delay: {
        "show": 300,    // Increased show delay to prevent flickering
        "hide": 0       // No automatic hide delay - we'll handle it manually
      },
      html: true,
      placement: "auto",
      trigger: "manual",  // Use manual trigger to have better control
      boundary: 'viewport',
      customClass: 'ui-preview-popover'
    });

    // Function to show popover
    const showPopover = () => {
      if (isPopoverShown) return;
      
      clearTimeout(loadingTimeout);
      clearTimeout(hideTimeout);
      
      loadingTimeout = setTimeout(() => {
        if (!isPopoverShown) {
          popover.show();
          isPopoverShown = true;
          
          // Set up popover hover handlers after it's shown
          setTimeout(() => {
            const popoverElement = document.querySelector('.popover.ui-preview-popover');
            if (popoverElement) {
              popoverElement.addEventListener('mouseenter', () => {
                clearTimeout(hideTimeout);
              });
              
              popoverElement.addEventListener('mouseleave', () => {
                hidePopover();
              });
            }
          }, 10);
          
          // Load content after showing
          getUiPreviewIframes(
            element.getAttribute("href"),
            attachIframeToHyperlinkElement,
            element
          );
        }
      }, 300);
    };

    // Function to hide popover
    const hidePopover = () => {
      clearTimeout(loadingTimeout);
      clearTimeout(hideTimeout);
      
      hideTimeout = setTimeout(() => {
        if (isPopoverShown) {
          popover.hide();
          isPopoverShown = false;
        }
      }, 200);  // Small delay to allow mouse movement to popover
    };

    // Mouse enter handler for the link
    element.addEventListener("mouseenter", showPopover);

    // Mouse leave handler for the link
    element.addEventListener("mouseleave", hidePopover);

    // Allow normal click behavior - don't prevent default when popover is shown
    // This allows users to click through to the resource even if popover is open
  });
}

function attachIframeToHyperlinkElement(compactStructure, uiElem) {
  var preview = compactStructure.small;
  
  // Create iframe with fixed dimensions that work well in the popover
  var iframeHtml = "<iframe src='" + preview.uri + "' ";
  iframeHtml += " style='border: none; width: 100%; height: 100%; display: block;'";
  iframeHtml += " title='Resource Preview'></iframe>";

  // Get the Bootstrap 5 popover instance and update content
  const popoverInstance = bootstrap.Popover.getInstance(uiElem);
  if (popoverInstance) {
    // Update the popover configuration with new content and title
    popoverInstance._config.content = iframeHtml;
    popoverInstance._config.title = compactStructure.title || "Resource Preview";

    // If popover is currently shown, update its content immediately
    const popoverElement = document.querySelector('.popover.ui-preview-popover');
    if (popoverElement) {
      const popoverBody = popoverElement.querySelector('.popover-body');
      if (popoverBody) {
        popoverBody.innerHTML = iframeHtml;
      }
      
      // Ensure header is visible and properly styled
      let popoverHeader = popoverElement.querySelector('.popover-header');
      if (!popoverHeader) {
        // Create header if it doesn't exist
        popoverHeader = document.createElement('div');
        popoverHeader.className = 'popover-header';
        popoverElement.insertBefore(popoverHeader, popoverBody);
      }
      popoverHeader.textContent = compactStructure.title || "Resource Preview";
      popoverHeader.style.display = 'block';
    }
  }
}

//Perform an asynch GET request to obtain the resource's UI-Preview information (an OSLC Compact resource).
//callbackFunction is then called once the request response is obtained.
//The caller should supply this callbackFunction, with any desired paramters under "callbackParamter"
//callbackFunction will be called with the following parameters (a) compactStructure, (d) callbackParamter
//where compactStructure represents more detailed about the OSLC Compact resource.
function getUiPreviewIframes(resourceUrl, callbackFunction, callbackParamter) {
  xmlhttp = new XMLHttpRequest();
  xmlhttp.onload = function () {
    if (this.status == 200) {
      data = this.responseText;
      try {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(data, "text/xml");
        var compactStructure = oslcCompactJsonStructure(xmlDoc);
        callbackFunction(compactStructure, callbackParamter);
      } catch (e) {
        iframeHtml = "<b>Error parsing preview dialog info</b>";
        callbackFunction("Error", callbackParamter);
      }
    }
    else {
      iframeHtml = "<b>Error loading the preview dialog</b> status:" + this.status;
      callbackFunction("Error", callbackParamter);
    }
  };
  xmlhttp.open("GET", resourceUrl, true);
  xmlhttp.setRequestHeader("Accept", "application/x-oslc-compact+xml");
  xmlhttp.send();
}

//returns a JSON struct representing a large and small UI-Preview info (uri, title, height and width) based on an OSLC Compact RDF resource.
function oslcCompactJsonStructure(oslcCompactXmlDocument) {
  var compactStructure = {};
  var compact = findFirstChildNode(findFirstChildNode(oslcCompactXmlDocument));

  var titleChild = findFirstChildNodeNamed(compact, 'dcterms:title');
  compactStructure.title = titleChild.textContent;

  var smallPrev = findFirstChildNodeNamed(compact, 'oslc:smallPreview');
  if (smallPrev !== null) {
    var preview = findFirstChildNode(smallPrev);
    if (preview) {
      compactStructure.small = {};
      var document = findFirstChildNodeNamed(preview, 'oslc:document');
      if (document)
        compactStructure.small.uri = document.getAttribute('rdf:resource');
      var height = findFirstChildNodeNamed(preview, 'oslc:hintHeight');
      compactStructure.small.height = height.textContent;
      var width = findFirstChildNodeNamed(preview, 'oslc:hintWidth');
      compactStructure.small.width = width.textContent;
    }
  }
  var largePrev = findFirstChildNodeNamed(compact, 'oslc:largePreview');
  if (largePrev !== null) {
    var preview = findFirstChildNode(largePrev);
    if (preview) {
      compactStructure.large = {};
      var document = findFirstChildNodeNamed(preview, 'oslc:document');
      if (document)
        compactStructure.large.uri = document.getAttribute('rdf:resource');
      var height = findFirstChildNodeNamed(preview, 'oslc:hintHeight');
      compactStructure.large.height = height.textContent;
      var width = findFirstChildNodeNamed(preview, 'oslc:hintWidth');
      compactStructure.large.width = width.textContent;
    }
  }
  return compactStructure;
}

function findFirstChildNode(e) {
  for (i = 0; i < e.childNodes.length; i++) {
    if (e.childNodes[i].nodeType === Node.ELEMENT_NODE) {
      return e.childNodes[i];
    }
  }
}

function findFirstChildNodeNamed(e, nodeName) {
  for (i = 0; i < e.childNodes.length; i++) {
    if (e.childNodes[i].nodeType === Node.ELEMENT_NODE
      && e.childNodes[i].nodeName === nodeName) {
      return e.childNodes[i];
    }
  }
}
