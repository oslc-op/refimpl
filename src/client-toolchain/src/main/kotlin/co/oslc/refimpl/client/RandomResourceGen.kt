package co.oslc.refimpl.client

import com.github.javafaker.Faker
import org.eclipse.lyo.oslc.domains.am.LinkType
import org.eclipse.lyo.oslc.domains.am.Resource
import org.eclipse.lyo.oslc.domains.cm.ChangeRequest
import org.eclipse.lyo.oslc.domains.qm.*
import org.eclipse.lyo.oslc.domains.rm.Requirement
import org.eclipse.lyo.oslc.domains.rm.RequirementCollection
import org.eclipse.lyo.oslc4j.core.model.AbstractResource
import org.eclipse.lyo.oslc4j.core.model.Link
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider
import java.util.*

interface RandomResourceGen<T : AbstractResource> {
    fun generate(sp: ServiceProvider, n: Int): List<T>
}

/**
 * Simple generator that does not need to consume any external results
 */
class SimpleResourceGen<T : AbstractResource>(private val generator: (ServiceProvider, Int, Int) -> T) : RandomResourceGen<T> {
    override fun generate(sp: ServiceProvider, n: Int): List<T> = (1..n).map { i -> generator(sp, i, n) }

}

class RequirementCollGen: RandomResourceGen<RequirementCollection> {
    override fun generate(sp: ServiceProvider, n: Int): List<RequirementCollection> {
        TODO("Not yet implemented")
    }
}

fun genRequirementColl(sp: ServiceProvider, id: Int, max:Int): RequirementCollection {
    val r = RequirementCollection()
    val faker = Faker()
    r.apply {
        shortTitle = "${sp.identifier.uppercase(Locale.getDefault())}-C$id"
        identifier = "rq_coll_$id"
        title = "Requirement Collection no. $id"
        description = faker.chuckNorris().fact()
        modified = Date()
    }
    return r
}

fun genRequirement(sp: ServiceProvider, id: Int, max:Int): Requirement {
    val r = Requirement()
    r.apply {
        shortTitle = "${sp.identifier.uppercase(Locale.getDefault())}-R$id"
        identifier = "req_$id"
        title = "Requirement no. $id"
        description = "Requirement no. $id was generated by a 'client-toolchain' project. Edit src/client-toolchain/src/main/kotlin/co/oslc/refimpl/client/RandomResourceGen.kt to change how these resources look."
        modified = Date()

        constrainedBy = randomRequirementLink(max, id)
        elaboratedBy = randomRequirementLink(max, id)
    }
    return r
}

fun randomRequirementLink(maxId: Int, exceptId: Int): Set<Link> {
    val id = randomIdExcept(maxId, exceptId)
    val to = "http://localhost:8800/services/Requirement/sp_single/req_$id"
    return singleLinkTo(to)
}


class ChangeRequestGen(private val requirements: List<Link>) : RandomResourceGen<ChangeRequest> {
    override fun generate(sp: ServiceProvider, n: Int): List<ChangeRequest> {
        return (1..n).map { id ->
            ChangeRequest().apply {
                shortTitle = "CR-$id"
                title = "Change Request no. $id"
                created = Date()
                creator = singleLinkTo("https://github.com/berezovskyi/")
                affectsRequirement = randomLink(requirements)
            }
        }
    }
}

/*
 * Order:
 * Script
 * Case
 * Plan
 * Result or ExecutionRecord
 */
class TestScriptGen(private val requirements: List<Link>,
                    private val changeRequests: List<Link>) : RandomResourceGen<TestScript> {
    override fun generate(sp: ServiceProvider, n: Int): List<TestScript> {
        fun genScript(sp: ServiceProvider, id: Int, max:Int): TestScript {
            val r = TestScript()
            r.apply {
                title = "Test Plan no. $id"
                created = Date()
                creator = singleLinkTo("https://github.com/berezovskyi/")

                validatesRequirement = randomLink(requirements)
                relatedChangeRequest = randomLink(changeRequests)
            }
            return r
        }

        return (1..n).map { i -> genScript(sp, i, n) }
    }
}

fun genPlan(sp: ServiceProvider, id: Int, max:Int): TestPlan {
    val r = TestPlan()
    r.apply {
        title = "Test Plan no. $id"
        created = Date()
        // TODO: 2020-04-02 set more fields
        // TODO: 2020-04-02 find a way to link resources

    }
    return r
}

fun genTestCase(sp: ServiceProvider, id: Int, max:Int): TestCase {
    val r = TestCase()
    val faker = Faker()
    val f = faker.backToTheFuture()
    r.apply {
        title = "Back to the future ${f.character()} test case for ${f.date()}"
        identifier = id.toString()
        created = Date()
        description = f.quote()
    }
    return r
}

fun genTestResult(sp: ServiceProvider, id: Int, max:Int): TestResult {
    val r = TestResult()
    val faker = Faker()
    val idStr = faker.code().asin()
    val t = "TR-$idStr"
    r.apply {
        title = t
        identifier = idStr
        created = Date()
        status = faker.aviation().METAR()
    }
    return r
}

fun genTestExecutionRecord(sp: ServiceProvider, id: Int, max:Int): TestExecutionRecord {
    val r = TestExecutionRecord()
    val faker = Faker()
    val idStr = faker.code().asin()
    val t = "TExR-$idStr"
    r.apply {
        title = t
        identifier = idStr
        created = Date()
    }
    return r
}

fun genTestScript(sp: ServiceProvider, id: Int, max:Int): TestScript {
    val r = TestScript()
    val faker = Faker()
    val idStr = faker.code().asin()
    val t = "TS-$idStr"
    r.apply {
        title = t
        identifier = idStr
        created = Date()
        description = faker.company().bs() + " AND " + faker.company().bs()
    }
    return r
}

fun genAMResource(sp: ServiceProvider, id: Int, max:Int): Resource {
    val r = Resource()
    val faker = Faker()
    val idStr = faker.code().asin()
    val t = "AMR-$idStr"
    r.apply {
        title = t
        identifier = idStr
        created = Date()
    }
    return r
}

fun genAMLink(sp: ServiceProvider, id: Int, max:Int): LinkType {
    val r = LinkType()
    val faker = Faker()
    val idStr = faker.code().asin()
    val t = "ALi-$idStr"
    r.apply {
        identifier = idStr
        label = t
        created = Date()
        comment = faker.chuckNorris().fact()
    }
    return r
}


class TestCaseGen(private val requirements: List<Link>,
                    private val changeRequests: List<Link>,
                    private val testScripts: List<Link>
) : RandomResourceGen<TestCase> {
    override fun generate(sp: ServiceProvider, n: Int): List<TestCase> {
        fun gen(sp: ServiceProvider, id: Int, max:Int): TestCase {
            val r = TestCase()
            r.apply {
                identifier = "TC-$id"
                title = "Test Case no. $id"
                description = """Lorem ipsum (TC-$id) dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. """
                created = Date()
                modified = Date()

                contributor = singleLinkTo("https://github.com/jadelkhoury/")
                creator = singleLinkTo("https://github.com/berezovskyi/")
                serviceProvider = singleLinkTo(sp.about)

//                relatedChangeRequest = randomLink(changeRequests)
//                testsChangeRequest = randomLink(changeRequests)
//                usesTestScript = randomLink(testScripts)
//                validatesRequirement = randomLink(requirements)


                // see https://github.com/eclipse/lyo.domains/issues/22
//                subject =

//                instanceShape

            }
            return r
        }

        return (1..n).map { i -> gen(sp, i, n) }
    }
}
