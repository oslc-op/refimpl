// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Jim Amsden          - Support for UI Preview (494303)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package co.oslc.refimpl.cm.gen.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONException;
import org.apache.wink.json4j.JSONObject;
import org.apache.wink.json4j.JSONArray;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.eclipse.lyo.oslc4j.core.OSLC4JConstants;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import co.oslc.refimpl.cm.gen.CMManager;
import co.oslc.refimpl.cm.gen.CMConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import co.oslc.refimpl.cm.gen.servlet.ServiceProviderCatalogSingleton;
import org.eclipse.lyo.oslc.domains.Agent;
import org.eclipse.lyo.oslc.domains.cm.ChangeNotice;
import org.eclipse.lyo.oslc.domains.cm.ChangeRequest;
import org.eclipse.lyo.oslc.domains.config.ChangeSet;
import org.eclipse.lyo.oslc.domains.cm.Defect;
import org.eclipse.lyo.oslc4j.core.model.Discussion;
import org.eclipse.lyo.oslc.domains.cm.Enhancement;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.cm.Priority;
import org.eclipse.lyo.oslc.domains.rm.Requirement;
import org.eclipse.lyo.oslc.domains.cm.ReviewTask;
import org.eclipse.lyo.oslc.domains.cm.State;
import org.eclipse.lyo.oslc.domains.cm.Task;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_cmDomainConstants.CHANGE_MANAGEMENT_SHAPES_DOMAIN)
@Path("resources")
@Api(value = "OSLC Service for {" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + ", " + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + ", " + Oslc_cmDomainConstants.DEFECT_LOCALNAME + ", " + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + ", " + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + ", " + Oslc_cmDomainConstants.TASK_LOCALNAME + "}")
public class Change_requestsService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    private static final Logger log = LoggerFactory.getLogger(Change_requestsService.class);

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public Change_requestsService()
    {
        super();
    }

    private void addCORSHeaders (final HttpServletResponse httpServletResponse) {
        //UI preview can be blocked by CORS policy.
        //add select CORS headers to every response that is embedded in an iframe.
        httpServletResponse.addHeader("Access-Control-Allow-Origin", "*");
        httpServletResponse.addHeader("Access-Control-Allow-Methods", "GET, OPTIONS, HEAD");
        httpServletResponse.addHeader("Access-Control-Allow-Headers", "origin, content-type, accept, authorization");
        httpServletResponse.addHeader("Access-Control-Allow-Credentials", "true");
    }

    @OslcQueryCapability
    (
        title = "ChangeRequest QC",
        label = "ChangeRequest Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH,
        resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE},
        usages = {}
    )
    @GET
    @Path("query_cr")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.CHANGEREQUEST_TYPE + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public ChangeRequest[] queryChangeRequests(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryChangeRequests
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<ChangeRequest> resources = CMManager.queryChangeRequests(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new ChangeRequest [resources.size()]);
    }

    @GET
    @Path("query_cr")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.CHANGEREQUEST_TYPE + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryChangeRequestsAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryChangeRequestsAsHtml
        // End of user code

        final List<ChangeRequest> resources = CMManager.queryChangeRequests(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryChangeRequestsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "Defect QC",
        label = "Defect Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.DEFECT_PATH,
        resourceTypes = {Oslc_cmDomainConstants.DEFECT_TYPE},
        usages = {}
    )
    @GET
    @Path("query_defect")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.DEFECT_TYPE + "\">" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.DEFECT_PATH + "\">" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public Defect[] queryDefects(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryDefects
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<Defect> resources = CMManager.queryDefects(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new Defect [resources.size()]);
    }

    @GET
    @Path("query_defect")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.DEFECT_TYPE + "\">" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.DEFECT_PATH + "\">" + Oslc_cmDomainConstants.DEFECT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryDefectsAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryDefectsAsHtml
        // End of user code

        final List<Defect> resources = CMManager.queryDefects(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryDefectsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "Task QC",
        label = "Task Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.TASK_PATH,
        resourceTypes = {Oslc_cmDomainConstants.TASK_TYPE},
        usages = {}
    )
    @GET
    @Path("query_task")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.TASK_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.TASK_TYPE + "\">" + Oslc_cmDomainConstants.TASK_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.TASK_PATH + "\">" + Oslc_cmDomainConstants.TASK_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public Task[] queryTasks(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryTasks
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<Task> resources = CMManager.queryTasks(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new Task [resources.size()]);
    }

    @GET
    @Path("query_task")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.TASK_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.TASK_TYPE + "\">" + Oslc_cmDomainConstants.TASK_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.TASK_PATH + "\">" + Oslc_cmDomainConstants.TASK_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryTasksAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryTasksAsHtml
        // End of user code

        final List<Task> resources = CMManager.queryTasks(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryTasksAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/taskscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "Enhancement QC",
        label = "Enhancement Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.ENHANCEMENT_PATH,
        resourceTypes = {Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
        usages = {}
    )
    @GET
    @Path("query_enh")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.ENHANCEMENT_TYPE + "\">" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.ENHANCEMENT_PATH + "\">" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public Enhancement[] queryEnhancements(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryEnhancements
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<Enhancement> resources = CMManager.queryEnhancements(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new Enhancement [resources.size()]);
    }

    @GET
    @Path("query_enh")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.ENHANCEMENT_TYPE + "\">" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.ENHANCEMENT_PATH + "\">" + Oslc_cmDomainConstants.ENHANCEMENT_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryEnhancementsAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryEnhancementsAsHtml
        // End of user code

        final List<Enhancement> resources = CMManager.queryEnhancements(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryEnhancementsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "Review QC",
        label = "ReviewTask Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.REVIEWTASK_PATH,
        resourceTypes = {Oslc_cmDomainConstants.REVIEWTASK_TYPE},
        usages = {}
    )
    @GET
    @Path("query_review")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.REVIEWTASK_TYPE + "\">" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.REVIEWTASK_PATH + "\">" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public ReviewTask[] queryReviewTasks(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryReviewTasks
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<ReviewTask> resources = CMManager.queryReviewTasks(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new ReviewTask [resources.size()]);
    }

    @GET
    @Path("query_review")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.REVIEWTASK_TYPE + "\">" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.REVIEWTASK_PATH + "\">" + Oslc_cmDomainConstants.REVIEWTASK_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryReviewTasksAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryReviewTasksAsHtml
        // End of user code

        final List<ReviewTask> resources = CMManager.queryReviewTasks(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryReviewTasksAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtaskscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "ChangeNotice QC",
        label = "ChangeNotice Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGENOTICE_PATH,
        resourceTypes = {Oslc_cmDomainConstants.CHANGENOTICE_TYPE},
        usages = {}
    )
    @GET
    @Path("query_cn")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.CHANGENOTICE_TYPE + "\">" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGENOTICE_PATH + "\">" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public ChangeNotice[] queryChangeNotices(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryChangeNotices
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<ChangeNotice> resources = CMManager.queryChangeNotices(httpServletRequest, where, prefix, page, pageSize);
        httpServletRequest.setAttribute("queryUri",
                uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        if (resources.size() > pageSize) {
            resources.remove(resources.size() - 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
        }
        return resources.toArray(new ChangeNotice [resources.size()]);
    }

    @GET
    @Path("query_cn")
    @Produces({ MediaType.TEXT_HTML })
    @ApiOperation(
        value = "Query capability for resources of type {" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "}",
        notes = "Query capability for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.CHANGENOTICE_TYPE + "\">" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGENOTICE_PATH + "\">" + Oslc_cmDomainConstants.CHANGENOTICE_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE + ", " + MediaType.TEXT_HTML
    )
    public void queryChangeNoticesAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        int page=0;
        int pageSize=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryChangeNoticesAsHtml
        // End of user code

        final List<ChangeNotice> resources = CMManager.queryChangeNotices(httpServletRequest, where, prefix, page, pageSize);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryChangeNoticesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > pageSize) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE,
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&oslc.pageSize=" + pageSize + "&page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "ChangeRequestDlgSel",
         label = "Change Request Selection Dialog",
         uri = "resources/select_change_request",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE},
         usages = {}
    )
    @GET
    @Path("select_change_request")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response ChangeRequestSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code ChangeRequestSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code ChangeRequestSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<ChangeRequest> resources = CMManager.ChangeRequestSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (ChangeRequest resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code ChangeRequestSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "ChangeRequest");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    @OslcDialog
    (
         title = "DefectDlgSel",
         label = "Defect Selection Dialog",
         uri = "resources/select_defect",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.DEFECT_TYPE},
         usages = {}
    )
    @GET
    @Path("select_defect")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response DefectSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code DefectSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code DefectSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<Defect> resources = CMManager.DefectSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (Defect resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code DefectSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "Defect");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    @OslcDialog
    (
         title = "TaskDlgSel",
         label = "Task Selection Dialog",
         uri = "resources/select_task",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.TASK_TYPE},
         usages = {}
    )
    @GET
    @Path("select_task")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response TaskSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code TaskSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code TaskSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<Task> resources = CMManager.TaskSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (Task resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code TaskSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "Task");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    @OslcDialog
    (
         title = "ReviewTaskDlgSel",
         label = "Review Task Selection Dialog",
         uri = "resources/select_review_task",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.REVIEWTASK_TYPE},
         usages = {}
    )
    @GET
    @Path("select_review_task")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response ReviewTaskSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code ReviewTaskSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code ReviewTaskSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<ReviewTask> resources = CMManager.ReviewTaskSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (ReviewTask resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code ReviewTaskSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "ReviewTask");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    @OslcDialog
    (
         title = "ChangeNoticeDlgSel",
         label = "Change Notice Selection Dialog",
         uri = "resources/select_change_notice",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGENOTICE_TYPE},
         usages = {}
    )
    @GET
    @Path("select_change_notice")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response ChangeNoticeSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code ChangeNoticeSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code ChangeNoticeSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<ChangeNotice> resources = CMManager.ChangeNoticeSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (ChangeNotice resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code ChangeNoticeSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "ChangeNotice");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    @OslcDialog
    (
         title = "EnhancementDlgSel",
         label = "Enhancement Selection Dialog",
         uri = "resources/select_enhancement",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
         usages = {}
    )
    @GET
    @Path("select_enhancement")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response EnhancementSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code EnhancementSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code EnhancementSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<Enhancement> resources = CMManager.EnhancementSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (Enhancement resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    // Start of user code EnhancementSelector_setResponse
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "Enhancement");
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    /**
     * Create a single ChangeRequest via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "ChangeRequestCF",
         label = "Change Request Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH},
         resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE},
         usages = {}
    )
    @POST
    @Path("create_change_request")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @ApiOperation(
        value = "Creation factory for resources of type {" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "}",
        notes = "Creation factory for resources of type {" + "<a href=\"" + Oslc_cmDomainConstants.CHANGEREQUEST_TYPE + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH + "\">" + Oslc_cmDomainConstants.CHANGEREQUEST_LOCALNAME + "</a>" + "}",
        produces = OslcMediaType.APPLICATION_RDF_XML + ", " + OslcMediaType.APPLICATION_XML + ", " + OslcMediaType.APPLICATION_JSON + ", " + OslcMediaType.TEXT_TURTLE
    )
    public Response createChangeRequest(
            
            final ChangeRequest aResource
        ) throws IOException, ServletException
    {
        ChangeRequest newResource = CMManager.createChangeRequest(httpServletRequest, aResource);
        httpServletResponse.setHeader("ETag", CMManager.getETagFromChangeRequest(newResource));
        return Response.created(newResource.getAbout()).entity(newResource).header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_defect")
    @Consumes({MediaType.WILDCARD})
    public Response DefectCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code DefectCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "DefectDlgCr",
         label = "Defect Creation Dialog",
         uri = "resources/create_defect",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.DEFECT_TYPE},
         usages = {}
    )
    @POST
    @Path("create_defect")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createDefectFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        Defect newResource = null;

        Defect aResource = new Defect();

        List<String> paramValues;

        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("discussedBy");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDiscussedBy(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closeDate");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("status");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setStatus(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setClosed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("inProgress");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setInProgress(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("fixed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setFixed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("approved");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setApproved(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("reviewed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setReviewed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("verified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setVerified(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("relatedChangeRequest");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addRelatedChangeRequest(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsPlanItem");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsPlanItem(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedByDefect");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedByDefect(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksChangeSet");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksChangeSet(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addParent(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("priority");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addPriority(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("state");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setState(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("authorizer");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAuthorizer(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = CMManager.createDefectFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_task")
    @Consumes({MediaType.WILDCARD})
    public Response TaskCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code TaskCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/taskcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "TaskDlgCr",
         label = "Task Creation Dialog",
         uri = "resources/create_task",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.TASK_TYPE},
         usages = {}
    )
    @POST
    @Path("create_task")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createTaskFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        Task newResource = null;

        Task aResource = new Task();

        List<String> paramValues;

        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("discussedBy");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDiscussedBy(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closeDate");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("status");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setStatus(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setClosed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("inProgress");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setInProgress(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("fixed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setFixed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("approved");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setApproved(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("reviewed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setReviewed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("verified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setVerified(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("relatedChangeRequest");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addRelatedChangeRequest(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsPlanItem");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsPlanItem(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedByDefect");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedByDefect(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksChangeSet");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksChangeSet(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addParent(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("priority");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addPriority(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("state");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setState(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("authorizer");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAuthorizer(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = CMManager.createTaskFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_review_task")
    @Consumes({MediaType.WILDCARD})
    public Response ReviewTaskCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code ReviewTaskCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtaskcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "ReviewTaskDlgCr",
         label = "Review Task Creation Dialog",
         uri = "resources/create_review_task",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.REVIEWTASK_TYPE},
         usages = {}
    )
    @POST
    @Path("create_review_task")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createReviewTaskFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        ReviewTask newResource = null;

        ReviewTask aResource = new ReviewTask();

        List<String> paramValues;

        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("discussedBy");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDiscussedBy(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closeDate");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("status");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setStatus(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setClosed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("inProgress");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setInProgress(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("fixed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setFixed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("approved");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setApproved(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("reviewed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setReviewed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("verified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setVerified(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("relatedChangeRequest");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addRelatedChangeRequest(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsPlanItem");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsPlanItem(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedByDefect");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedByDefect(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksChangeSet");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksChangeSet(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addParent(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("priority");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addPriority(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("state");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setState(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("authorizer");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAuthorizer(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = CMManager.createReviewTaskFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_change_notice")
    @Consumes({MediaType.WILDCARD})
    public Response ChangeNoticeCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code ChangeNoticeCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticecreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "ChangeNoticeDlgCr",
         label = "Change Notice Creation Dialog",
         uri = "resources/create_change_notice",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGENOTICE_TYPE},
         usages = {}
    )
    @POST
    @Path("create_change_notice")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createChangeNoticeFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        ChangeNotice newResource = null;

        ChangeNotice aResource = new ChangeNotice();

        List<String> paramValues;

        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("discussedBy");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDiscussedBy(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closeDate");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("status");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setStatus(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setClosed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("inProgress");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setInProgress(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("fixed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setFixed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("approved");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setApproved(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("reviewed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setReviewed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("verified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setVerified(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("relatedChangeRequest");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addRelatedChangeRequest(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsPlanItem");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsPlanItem(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedByDefect");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedByDefect(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksChangeSet");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksChangeSet(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addParent(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("priority");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addPriority(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("state");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setState(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("authorizer");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAuthorizer(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = CMManager.createChangeNoticeFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_enhancement")
    @Consumes({MediaType.WILDCARD})
    public Response EnhancementCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code EnhancementCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "EnhancementDlgCr",
         label = "Enhancement Creation Dialog",
         uri = "resources/create_enhancement",
         hintWidth = "500px",
         hintHeight = "500px",
         resourceTypes = {Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
         usages = {}
    )
    @POST
    @Path("create_enhancement")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createEnhancementFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        Enhancement newResource = null;

        Enhancement aResource = new Enhancement();

        List<String> paramValues;

        paramValues = formParams.get("shortTitle");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setShortTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subject");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubject(paramValues.get(i));
                }
        }
        paramValues = formParams.get("creator");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addCreator(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("contributor");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContributor(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("created");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("modified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("serviceProvider");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addServiceProvider(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("instanceShape");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addInstanceShape(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("discussedBy");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDiscussedBy(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closeDate");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("status");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setStatus(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("closed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setClosed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("inProgress");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setInProgress(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("fixed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setFixed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("approved");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setApproved(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("reviewed");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setReviewed(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("verified");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setVerified(new Boolean(paramValues.get(0)));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("relatedChangeRequest");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addRelatedChangeRequest(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsPlanItem");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsPlanItem(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectedByDefect");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectedByDefect(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("implementsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addImplementsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("affectsRequirement");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAffectsRequirement(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("tracksChangeSet");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addTracksChangeSet(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addParent(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("priority");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addPriority(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("state");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setState(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("authorizer");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addAuthorizer(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = CMManager.createEnhancementFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
}
